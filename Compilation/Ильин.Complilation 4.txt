/---------------------------------------------------------------/
unsigned int fd(unsigned int a)
{
    return a / 10;
}

Переменные хранятся в регистрах и ячейке: %rbp %eax %rax -4(%rbp)

fd:
.LFB0:

	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movl	%eax, %edx
	movl	$3435973837, %eax
	imulq	%rdx, %rax
	shrq	$32, %rax
	shrl	$3, %eax
	popq	%rbp
	ret

Переменные хранятся в регистрах: %edi %eax %rax

fd:
.LFB0:

	movl	%edi, %eax
	movl	$3435973837, %edi
	imulq	%rdi, %rax
	shrq	$35, %rax
	ret

/------------------------------------------------------------------/
unsigned int fd1(unsigned int a)
{
    return a / 16;
}

Переменные хранятся в регистре %eax и ячейке -4(%rbp)

fd1:
.LFB0:

	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	shrl	$4, %eax
	popq	%rbp
	ret

Переменная хранится в регистре %eax

fd1:
.LFB0:

	endbr64
	movl	%edi, %eax
	shrl	$4, %eax
	ret

/------------------------------------------------------------------/
unsigned int fd2(unsigned int a, unsigned int b)
{
    return a % b;
}

Передача параметров: movl %edi, -4(%rbp) movl %esi, -8(%rbp) -4(%rbp),-8(%rbp) ссылки на переменные a и b
Переменные хранятся в регистрах %eax %edx и ячейках -4(%rbp) -8(%rbp)

fd2:
.LFB0:
	
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	-4(%rbp), %eax
	movl	$0, %edx
	divl	-8(%rbp)
	movl	%edx, %eax
	popq	%rbp
	ret

Передача параметров через регистры %esi %edi
Переменные хранятся в регистрах %eax %edx

fd2:
.LFB0:
	
	endbr64
	movl	%edi, %eax
	xorl	%edx, %edx
	divl	%esi
	movl	%edx, %eax
	ret

/------------------------------------------------------------------/
int f2(int a)
{
    switch (a)
    {
    case 1:
        return 5;
    case 6:
        return 7;
    case 10:
        return 3;
    case 1000:
        return 9;
    case 6000:
        return 8;
    case 10000:
        return 4;
    }
    return 0;
}

Переменная хранится в ячейке памяти -4(%rbp) и регистре %eax
Коанда сравнения cmpl и переходы je, jg, jmp с L метками образуют оператор ветвления

f2:
.LFB0:
	
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	cmpl	$10000, -4(%rbp)
	je	.L2
	cmpl	$10000, -4(%rbp)
	jg	.L3
	cmpl	$6000, -4(%rbp)
	je	.L4
	cmpl	$6000, -4(%rbp)
	jg	.L3
	cmpl	$1000, -4(%rbp)
	je	.L5
	cmpl	$1000, -4(%rbp)
	jg	.L3
	cmpl	$10, -4(%rbp)
	je	.L6
	cmpl	$10, -4(%rbp)
	jg	.L3
	cmpl	$1, -4(%rbp)
	je	.L7
	cmpl	$6, -4(%rbp)
	je	.L8
	jmp	.L3
.L7:
	movl	$5, %eax
	jmp	.L9
.L8:
	movl	$7, %eax
	jmp	.L9
.L6:
	movl	$3, %eax
	jmp	.L9
.L5:
	movl	$9, %eax
	jmp	.L9
.L4:
	movl	$8, %eax
	jmp	.L9
.L2:
	movl	$4, %eax
	jmp	.L9
.L3:
	movl	$0, %eax
.L9:
	popq	%rbp
	ret

Переменная хранится в регистрах %edi %eax
Команда сравнения cmpl и переходы je, jg, jne, jmp с L метками образуют оператор ветвления

f2:
.LFB0:
	
	endbr64
	cmpl	$1000, %edi
	je	.L4
	jg	.L3
	movl	$7, %eax
	cmpl	$6, %edi
	je	.L1
	movl	$3, %eax
	cmpl	$10, %edi
	jne	.L14
.L1:
	ret
	.p2align 4,,10
	.p2align 3
.L14:
	xorl	%eax, %eax
	cmpl	$1, %edi
	sete	%al
	leal	(%rax,%rax,4), %eax
	ret
	.p2align 4,,10
	.p2align 3
.L3:
	movl	$8, %eax
	cmpl	$6000, %edi
	je	.L1
	xorl	%eax, %eax
	cmpl	$10000, %edi
	sete	%al
	sall	$2, %eax
	ret
	.p2align 4,,10
	.p2align 3
.L4:
	movl	$9, %eax
	ret

/------------------------------------------------------------------/
int f3(int a)
{
    switch (a)
    {
    case 3:
        return 5;
    case 5:
        return 7;
    case 6:
        return 3;
    case 8:
        return 4;
    case 9:
        return 1;
    case 7:
        return 8;
    }
    return 0;
}

Переменная хранится в регистрах %rbp %eax и ячейке -4(%rbp)
Оператор ветвления образован с помощью команды сравнения cmpl, переходов ja, jmp и указателей .long на возвращаемые значения

f3:
.LFB0:
	
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp) 
	movl	-4(%rbp), %eax
	subl	$3, %eax
	cmpl	$6, %eax
	ja	.L2
	movl	%eax, %eax
	leaq	0(,%rax,4), %rdx
	leaq	.L4(%rip), %rax
	movl	(%rdx,%rax), %eax
	cltq
	leaq	.L4(%rip), %rdx
	addq	%rdx, %rax
	notrack jmp	*%rax
	.section	.rodata
	.align 4
	.align 4
.L4:
	.long	.L9-.L4
	.long	.L2-.L4
	.long	.L8-.L4
	.long	.L7-.L4
	.long	.L6-.L4
	.long	.L5-.L4
	.long	.L3-.L4
	.text
.L9:
	movl	$5, %eax
	jmp	.L10
.L8:
	movl	$7, %eax
	jmp	.L10
.L7:
	movl	$3, %eax
	jmp	.L10
.L5:
	movl	$4, %eax
	jmp	.L10
.L3:
	movl	$1, %eax
	jmp	.L10
.L6:
	movl	$8, %eax
	jmp	.L10
.L2:
	movl	$0, %eax
.L10:
	popq	%rbp
	ret

Переменная хранится в регистрах %edi %eax
Оператор ветвления образован при помощи оператора xorl

f3:
.LFB0:
	
	endbr64
	subl	$3, %edi
	xorl	%eax, %eax
	cmpl	$6, %edi
	ja	.L1
	leaq	CSWTCH.1(%rip), %rax
	movl	(%rax,%rdi,4), %eax
.L1:
	ret

/------------------------------------------------------------------/
int if2(int a)
{
    int b = a == 50 ? 12 : 26;
    return b;
}

Переменные хранятся в регистре %eax и ячейке -20(%rbp)
Оператор ветвления организован с помощью команды cmpl, переходов jne, jmp

if2:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -20(%rbp)
	cmpl	$50, -20(%rbp)
	jne	.L2
	movl	$12, %eax
	jmp	.L3
.L2:
	movl	$26, %eax
.L3:
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	popq	%rbp
	ret

Переменные хранятся в регистрах %edi %edx %eax
Оператор ветвления организован с помощью команды cmovne

if2:
.LFB0:
	endbr64
	cmpl	$50, %edi
	movl	$26, %edx
	movl	$12, %eax
	cmovne	%edx, %eax
	ret

/------------------------------------------------------------------/
int if3(int a, int b, int c)
{
    if (a && c)
        return b;
    else
        return c;
}

Параметры передаются с помощью команд movl %edi, -4(%rbp)//movl %esi, -8(%rbp)//movl %edx, -12(%rbp)
Переменные хранятся в ячейках памяти -4(%rbp) -8(%rbp) -12(%rbp) и регистре %eax
Оператор ветвления организован с помощью команды cmpl и переходов je, jmp

if3:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	cmpl	$0, -4(%rbp)
	je	.L2
	cmpl	$0, -12(%rbp)
	je	.L2
	movl	-8(%rbp), %eax
	jmp	.L3
.L2:
	movl	-12(%rbp), %eax
.L3:
	popq	%rbp
	ret

Переменные хранятся в регистрах %eax %edi %edx
Оператор ветвления организован с помошью команды testl и перехода je

if3:
.LFB0:
	
	endbr64
	movl	%esi, %eax
	testl	%edi, %edi
	je	.L4
	testl	%edx, %edx
	je	.L4
	ret
	.p2align 4,,10
	.p2align 3
.L4:
	movl	%edx, %eax
	ret

/------------------------------------------------------------------/
int if4(int a, int b, int c)
{
    if (a || c == b)
        return b;
    else
        return a;
}

Параметры передаются с помощью команд movl %edi, -4(%rbp)//movl %esi, -8(%rbp)//movl %edx, -12(%rbp)
Переменные хранятся в ячейках памяти -4(%rbp) -8(%rbp) -12(%rbp) и регистре %eax
Оператор ветвления организован с помощью команды cmpl, переходов jne, jmp и меток .L

if4:
.LFB0:
	
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	cmpl	$0, -4(%rbp)
	jne	.L2
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jne	.L3
.L2:
	movl	-8(%rbp), %eax
	jmp	.L4
.L3:
	movl	-4(%rbp), %eax
.L4:
	popq	%rbp
	ret

Переменные хранятся в регистре %edi %eax %edx
Оператор ветвления организован с помощью команды testl, cmpl, перехода jne, je

if4:
.LFB0:
	
	endbr64
	testl	%edi, %edi
	jne	.L5
	xorl	%eax, %eax
	cmpl	%esi, %edx
	je	.L5
	ret
	.p2align 4,,10
	.p2align 3
.L5:
	movl	%esi, %eax
	ret

/------------------------------------------------------------------/
int *s[100];
int t[100];
void f2()
{
    for (int i = 0 ; i != 100 ; ++i)
        s[i] = &t[i];
}

void g();

void f1(int a)
{
    while (a)
    {
        --a;
        g();
    }
}

void f2(int a)
{
L:
    if (a)
    {
        --a;
        g();
        goto L;
    }
}

void f4(int a)
{
    do
    {
        --a;
        g();
    }
    while (a);
}

Переменные хранятся в регистре %eax и ячейке -4(%rbp)
Ветвление организовано с помощью команды cmpl, переходов jmp, jne, je и меток .L

f1:
.LFB0:
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	jmp	.L2
.L3:
	subl	$1, -4(%rbp)
	movl	$0, %eax
	call	g@PLT
.L2:
	cmpl	$0, -4(%rbp)
	jne	.L3
	nop
	nop
	leave
	ret

f2:
.LFB1:
	
	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
.L5:
	cmpl	$0, -4(%rbp)
	je	.L7
	subl	$1, -4(%rbp)
	movl	$0, %eax
	call	g@PLT
	jmp	.L5
.L7:
	nop
	leave
	ret

f4:
.LFB2:

	endbr64
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
.L9:
	subl	$1, -4(%rbp)
	movl	$0, %eax
	call	g@PLT
	cmpl	$0, -4(%rbp)
	jne	.L9
	nop
	nop
	leave
	ret
	
Переменные хранятся в регистре %eax %ebx
Ветвление организовано с помощью команды cmpl, xorl переходов jne, je

f1:
.LFB0:
	
	endbr64
	testl	%edi, %edi
	je	.L9
	pushq	%rbx
	movl	%edi, %ebx
	.p2align 4,,10
	.p2align 3
.L3:
	subl	$1, %ebx
	xorl	%eax, %eax
	call	g@PLT
	testl	%ebx, %ebx
	jne	.L3
	popq	%rbx
	
	ret
	.p2align 4,,10
	.p2align 3
.L9:
	
	ret
	
.LFE0:
	.size	f1, .-f1
	.p2align 4
	.globl	f2
	.type	f2, @function
f2:
.LFB1:
	
	endbr64
	testl	%edi, %edi
	je	.L21
	pushq	%rbx
	movl	%edi, %ebx
	.p2align 4,,10
	.p2align 3
.L15:
	subl	$1, %ebx
	xorl	%eax, %eax
	call	g@PLT
	testl	%ebx, %ebx
	jne	.L15
	popq	%rbx
	ret
	.p2align 4,,10
	.p2align 3
.L21:
	
	ret
	
.LFE1:
	.size	f2, .-f2
	.p2align 4
	.globl	f4
	.type	f4, @function
f4:
.LFB2:

	endbr64
	pushq	%rbx
	movl	%edi, %ebx
	.p2align 4,,10
	.p2align 3
.L25:
	subl	$1, %ebx
	xorl	%eax, %eax
	call	g@PLT
	testl	%ebx, %ebx
	jne	.L25
	popq	%rbx
	ret



	
